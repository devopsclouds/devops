pipepline workflow and stages.
so when it comes to my pipeline we use git flow strategy here when developers be working on their features branches  and merges  it to the developer branch.

# multistage build: its used to optimize the container images and make them smaller.
multi-stage builds let you create optimized Docker images with only the dependencies necessary to build your application. Combined with Dockerâ€™s layered images, this can help you save significant space. The multi-stage process saves space on your Docker host and in the Docker image and speeds up the build process
This way, you can separate the build and runtime environments in the same Dockerfile. Use build environment as a dependency [COPY --from=build HelloWorld.class .] while creating the Dockerfile with the approach of multi-stage docker build. This will help minimize the size of Docker images.

What is Docker daemon?
Docker daemon runs on the host operating system. It is responsible for running containers to manage docker services. Docker daemon communicates with other daemons. It offers various Docker objects such as images, containers, networking, and storage. 

Docker architecture
Docker follows Client-Server architecture, which includes the three main components that are Docker Client, Docker Host, and Docker Registry.

On typically docker send a commands to docker daemon by using API. Docker daemon sends to local registry  for docker images.local registrt is a place to store the images. If the image is find on local registry it will run the container for that image.
Remote registry: all the images are verrifyed and its more secure

Send the request to docker daemon
Then docker daemon uses containerd containerd uses runc  and runc to start the containers.

docker build
docker pull
docker run
2. Docker Host
Docker Host is used to provide an environment to execute and run applications. It contains the docker daemon, images, containers, networks, and storage.
3. Docker Registry
Docker Registry manages and stores the Docker images.
There are two types of registries in the Docker -
Pubic Registry - Public Registry is also called as Docker hub.
Private Registry - It is used to share images within the enterprise.
Docker Objects
There are the following Docker Objects -
Docker Images
Docker images are the read-only binary templates used to create Docker Containers. It uses a private container registry to share container images within the enterprise and also uses public container registry to share container images within the whole world. Metadata is also used by docket images to describe the container's abilities.
Docker Containers
Containers are the structural units of Docker, which is used to hold the entire package that is needed to run the application. The advantage of containers is that it requires very less resources.
In other words, we can say that the image is a template, and the container is a copy of that template.
 
Docker Networking
Using Docker Networking, an isolated package can be communicated. Docker contains the following network drivers -
o	Bridge - Bridge is a default network driver for the container. It is used when multiple docker communicates with the same docker host.
o	Host - It is used when we don't need for network isolation between the container and the host.
o	None - It disables all the networking.
o	Overlay - Overlay offers Swarm services to communicate with each other. It enables containers to run on the different docker host.
o	Macvlan - Macvlan is used when we want to assign MAC addresses to the containers.
Docker Storage
Docker Storage is used to store data on the container. Docker offers the following options for the Storage -
o	Data Volume - Data Volume provides the ability to create persistence storage. It also allows us to name volumes, list volumes, and containers associates with the volumes.
o	Directory Mounts - It is one of the best options for docker storage. It mounts a host's directory into a container.
o	Storage Plugins - It provides an ability to connect to external storage platforms.
Docker vs Virtual Machine
The following section aims to discuss the difference between Docker and VM:
Docker vs VM: Architecture


 
In the vm or docker start with physical server it can be any server
On hypervisior  it could be vmware 
Then vmware spin up the vms 
And each vm dedicate certain amount of resources might be 4GB Ram
And each vm consilodated some amount of space for guest os . you need to allocate a some amount of resource for guest os . if guest os might be windows machine u need lience version

If u are deploying the multiple applications u need multiple vms 
In docker it allows the multiple containers . All container utilizes the same operating system .docker engine emulates the file system ,process id for the container and not emulates the operating system 

All docker docker are run on docker hosts that all are isolated . docker containers are not interface from one container to another container


#microservices
Before microservices a monolthitic was a standard
let take the example of online shopping like user login , items , add to cart,payment
All these components are part of a single unit and all these functionalities in one code base
everthing is developed , deployed and scaled as a 1 unit.
App must be written with 1 tech stack.
Team  need to be careful to not affect with each other work.
1 single artifact you must redeploy the entire application on each update.


challenges of monolithic 
Application is too large and complex
parts are more tangled into each other
you can only scale the entire app instead of a specific service
high infrastracture costs
Release process takes longer
on every change the entire application need to be tested
 entire application need to be built and deployed
 bug in any module can potentinal bring down the entire application.
 
 
 
 # microservices
 
 to break the application based on functionalities
 each microservices can choose its own tech stack.
 each service has self contained and implements a single bussiness capability
 each team can develop the services independently without affecting it others
 There is a change in one of the component then you need to deploy the particular component
 
 communciation between one component to another component by using istio service mesh.
 
 Downsides of microservices
 configure the communcation between services
 
 mono repo vs poly repo
 
 mono repo has one repo that contains multiple services in git hub or git lab
 poly repo: each service has own repoistory
